{"ast":null,"code":"// src/services/unsplashService.js\nconst UNSPLASH_ACCESS_KEY = 'Vav_ZsQHIwJIQTh2FXP8wYroJ95JdWZClOiaf_5xBbM'; // 需要替换为实际的 Unsplash Access Key\n\nexport const unsplashService = {\n  // 搜索图片\n  searchImages: async (query, page = 1, perPage = 20) => {\n    try {\n      const response = await fetch(`https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&page=${page}&per_page=${perPage}`, {\n        headers: {\n          'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('搜索图片失败');\n      }\n      const data = await response.json();\n      return data.results.map(photo => ({\n        id: photo.id,\n        url: photo.urls.regular,\n        thumb: photo.urls.thumb,\n        full: photo.urls.full,\n        description: photo.description || photo.alt_description || '无描述',\n        author: photo.user.name,\n        authorUrl: photo.user.links.html,\n        width: photo.width,\n        height: photo.height\n      }));\n    } catch (error) {\n      console.error('搜索图片失败:', error);\n      throw error;\n    }\n  },\n  // 获取随机图片\n  getRandomImages: async (count = 20) => {\n    try {\n      const response = await fetch(`https://api.unsplash.com/photos/random?count=${count}`, {\n        headers: {\n          'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('获取随机图片失败');\n      }\n      const data = await response.json();\n      return data.map(photo => ({\n        id: photo.id,\n        url: photo.urls.regular,\n        thumb: photo.urls.thumb,\n        full: photo.urls.full,\n        description: photo.description || photo.alt_description || '无描述',\n        author: photo.user.name,\n        authorUrl: photo.user.links.html,\n        width: photo.width,\n        height: photo.height\n      }));\n    } catch (error) {\n      console.error('获取随机图片失败:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["UNSPLASH_ACCESS_KEY","unsplashService","searchImages","query","page","perPage","response","fetch","encodeURIComponent","headers","ok","Error","data","json","results","map","photo","id","url","urls","regular","thumb","full","description","alt_description","author","user","name","authorUrl","links","html","width","height","error","console","getRandomImages","count"],"sources":["/Users/zxydediannao/new_fashion-calendar/fashion-calendar/src/services/unsplashService.js"],"sourcesContent":["// src/services/unsplashService.js\nconst UNSPLASH_ACCESS_KEY = 'Vav_ZsQHIwJIQTh2FXP8wYroJ95JdWZClOiaf_5xBbM'; // 需要替换为实际的 Unsplash Access Key\n\nexport const unsplashService = {\n  // 搜索图片\n  searchImages: async (query, page = 1, perPage = 20) => {\n    try {\n      const response = await fetch(\n        `https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&page=${page}&per_page=${perPage}`,\n        {\n          headers: {\n            'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error('搜索图片失败');\n      }\n      \n      const data = await response.json();\n      return data.results.map(photo => ({\n        id: photo.id,\n        url: photo.urls.regular,\n        thumb: photo.urls.thumb,\n        full: photo.urls.full,\n        description: photo.description || photo.alt_description || '无描述',\n        author: photo.user.name,\n        authorUrl: photo.user.links.html,\n        width: photo.width,\n        height: photo.height\n      }));\n    } catch (error) {\n      console.error('搜索图片失败:', error);\n      throw error;\n    }\n  },\n\n  // 获取随机图片\n  getRandomImages: async (count = 20) => {\n    try {\n      const response = await fetch(\n        `https://api.unsplash.com/photos/random?count=${count}`,\n        {\n          headers: {\n            'Authorization': `Client-ID ${UNSPLASH_ACCESS_KEY}`\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error('获取随机图片失败');\n      }\n      \n      const data = await response.json();\n      return data.map(photo => ({\n        id: photo.id,\n        url: photo.urls.regular,\n        thumb: photo.urls.thumb,\n        full: photo.urls.full,\n        description: photo.description || photo.alt_description || '无描述',\n        author: photo.user.name,\n        authorUrl: photo.user.links.html,\n        width: photo.width,\n        height: photo.height\n      }));\n    } catch (error) {\n      console.error('获取随机图片失败:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA;AACA,MAAMA,mBAAmB,GAAG,6CAA6C,CAAC,CAAC;;AAE3E,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACAC,YAAY,EAAE,MAAAA,CAAOC,KAAK,EAAEC,IAAI,GAAG,CAAC,EAAEC,OAAO,GAAG,EAAE,KAAK;IACrD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gDAAgDC,kBAAkB,CAACL,KAAK,CAAC,SAASC,IAAI,aAAaC,OAAO,EAAE,EAC5G;QACEI,OAAO,EAAE;UACP,eAAe,EAAE,aAAaT,mBAAmB;QACnD;MACF,CACF,CAAC;MAED,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;MAC3B;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,OAAO,CAACC,GAAG,CAACC,KAAK,KAAK;QAChCC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,GAAG,EAAEF,KAAK,CAACG,IAAI,CAACC,OAAO;QACvBC,KAAK,EAAEL,KAAK,CAACG,IAAI,CAACE,KAAK;QACvBC,IAAI,EAAEN,KAAK,CAACG,IAAI,CAACG,IAAI;QACrBC,WAAW,EAAEP,KAAK,CAACO,WAAW,IAAIP,KAAK,CAACQ,eAAe,IAAI,KAAK;QAChEC,MAAM,EAAET,KAAK,CAACU,IAAI,CAACC,IAAI;QACvBC,SAAS,EAAEZ,KAAK,CAACU,IAAI,CAACG,KAAK,CAACC,IAAI;QAChCC,KAAK,EAAEf,KAAK,CAACe,KAAK;QAClBC,MAAM,EAAEhB,KAAK,CAACgB;MAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,eAAe,EAAE,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;IACrC,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gDAAgD6B,KAAK,EAAE,EACvD;QACE3B,OAAO,EAAE;UACP,eAAe,EAAE,aAAaT,mBAAmB;QACnD;MACF,CACF,CAAC;MAED,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC;MAC7B;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACG,GAAG,CAACC,KAAK,KAAK;QACxBC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,GAAG,EAAEF,KAAK,CAACG,IAAI,CAACC,OAAO;QACvBC,KAAK,EAAEL,KAAK,CAACG,IAAI,CAACE,KAAK;QACvBC,IAAI,EAAEN,KAAK,CAACG,IAAI,CAACG,IAAI;QACrBC,WAAW,EAAEP,KAAK,CAACO,WAAW,IAAIP,KAAK,CAACQ,eAAe,IAAI,KAAK;QAChEC,MAAM,EAAET,KAAK,CAACU,IAAI,CAACC,IAAI;QACvBC,SAAS,EAAEZ,KAAK,CAACU,IAAI,CAACG,KAAK,CAACC,IAAI;QAChCC,KAAK,EAAEf,KAAK,CAACe,KAAK;QAClBC,MAAM,EAAEhB,KAAK,CAACgB;MAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}