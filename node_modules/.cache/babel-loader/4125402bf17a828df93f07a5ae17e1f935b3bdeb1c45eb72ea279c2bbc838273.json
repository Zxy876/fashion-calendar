{"ast":null,"code":"// src/utils/storage.js\nimport moment from 'moment';\nconst STORAGE_KEYS = {\n  EVENTS: 'calendar-events',\n  DAILY_CONTENT: 'daily-content-',\n  DAILY_BACKGROUND: 'daily-background-'\n};\nexport const storageService = {\n  // 事件数据管理\n  getEvents: () => {\n    try {\n      const events = localStorage.getItem(STORAGE_KEYS.EVENTS);\n      return events ? JSON.parse(events) : [];\n    } catch (error) {\n      console.error('获取事件数据失败:', error);\n      return [];\n    }\n  },\n  saveEvents: events => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.EVENTS, JSON.stringify(events));\n      return true;\n    } catch (error) {\n      console.error('保存事件数据失败:', error);\n      return false;\n    }\n  },\n  addEvent: event => {\n    const events = storageService.getEvents();\n    const newEvent = {\n      ...event,\n      id: Date.now() + Math.random().toString(36).substr(2, 9)\n    };\n    events.push(newEvent);\n    storageService.saveEvents(events);\n    return newEvent;\n  },\n  updateEvent: (eventId, updates) => {\n    const events = storageService.getEvents();\n    const index = events.findIndex(e => e.id === eventId);\n    if (index !== -1) {\n      events[index] = {\n        ...events[index],\n        ...updates\n      };\n      storageService.saveEvents(events);\n      return events[index];\n    }\n    return null;\n  },\n  deleteEvent: eventId => {\n    const events = storageService.getEvents();\n    const filteredEvents = events.filter(e => e.id !== eventId);\n    storageService.saveEvents(filteredEvents);\n    return filteredEvents;\n  },\n  // 每日内容管理 - 修复这里的bug！\n  getDailyContent: date => {\n    try {\n      return localStorage.getItem(`${STORAGE_KEYS.DAILY_CONTENT}${date}`) || '';\n    } catch (error) {\n      console.error('获取每日内容失败:', error);\n      return '';\n    }\n  },\n  saveDailyContent: (date, content) => {\n    try {\n      // 修复：使用 DAILY_CONTENT 而不是 DAILY_BACKGROUND\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_CONTENT}${date}`, content);\n      console.log(`内容已保存到: daily-content-${date}`, content.substring(0, 100));\n      return true;\n    } catch (error) {\n      console.error('保存每日内容失败:', error);\n      return false;\n    }\n  },\n  // 每日背景图片管理\n  getDailyBackground: date => {\n    try {\n      return localStorage.getItem(`${STORAGE_KEYS.DAILY_BACKGROUND}${date}`) || '';\n    } catch (error) {\n      console.error('获取背景图片失败:', error);\n      return '';\n    }\n  },\n  saveDailyBackground: (date, backgroundImage) => {\n    try {\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_BACKGROUND}${date}`, backgroundImage);\n      return true;\n    } catch (error) {\n      console.error('保存背景图片失败:', error);\n      return false;\n    }\n  },\n  // 获取特定日期的事件\n  getEventsByDate: date => {\n    const events = storageService.getEvents();\n    return events.filter(event => moment(event.start).isSame(date, 'day'));\n  },\n  // 获取本月事件\n  getEventsByMonth: date => {\n    const events = storageService.getEvents();\n    return events.filter(event => moment(event.start).isSame(date, 'month'));\n  },\n  // 新增：清理所有数据（用于测试）\n  clearAllData: () => {\n    try {\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('daily-content-') || key.startsWith('daily-background-') || key === 'calendar-events') {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('所有数据已清理');\n      return true;\n    } catch (error) {\n      console.error('清理数据失败:', error);\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["moment","STORAGE_KEYS","EVENTS","DAILY_CONTENT","DAILY_BACKGROUND","storageService","getEvents","events","localStorage","getItem","JSON","parse","error","console","saveEvents","setItem","stringify","addEvent","event","newEvent","id","Date","now","Math","random","toString","substr","push","updateEvent","eventId","updates","index","findIndex","e","deleteEvent","filteredEvents","filter","getDailyContent","date","saveDailyContent","content","log","substring","getDailyBackground","saveDailyBackground","backgroundImage","getEventsByDate","start","isSame","getEventsByMonth","clearAllData","Object","keys","forEach","key","startsWith","removeItem"],"sources":["/Users/zxydediannao/new_fashion-calendar/fashion-calendar/src/utils/storage.js"],"sourcesContent":["// src/utils/storage.js\nimport moment from 'moment';\n\nconst STORAGE_KEYS = {\n  EVENTS: 'calendar-events',\n  DAILY_CONTENT: 'daily-content-',\n  DAILY_BACKGROUND: 'daily-background-'\n};\n\nexport const storageService = {\n  // 事件数据管理\n  getEvents: () => {\n    try {\n      const events = localStorage.getItem(STORAGE_KEYS.EVENTS);\n      return events ? JSON.parse(events) : [];\n    } catch (error) {\n      console.error('获取事件数据失败:', error);\n      return [];\n    }\n  },\n\n  saveEvents: (events) => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.EVENTS, JSON.stringify(events));\n      return true;\n    } catch (error) {\n      console.error('保存事件数据失败:', error);\n      return false;\n    }\n  },\n\n  addEvent: (event) => {\n    const events = storageService.getEvents();\n    const newEvent = {\n      ...event,\n      id: Date.now() + Math.random().toString(36).substr(2, 9)\n    };\n    events.push(newEvent);\n    storageService.saveEvents(events);\n    return newEvent;\n  },\n\n  updateEvent: (eventId, updates) => {\n    const events = storageService.getEvents();\n    const index = events.findIndex(e => e.id === eventId);\n    if (index !== -1) {\n      events[index] = { ...events[index], ...updates };\n      storageService.saveEvents(events);\n      return events[index];\n    }\n    return null;\n  },\n\n  deleteEvent: (eventId) => {\n    const events = storageService.getEvents();\n    const filteredEvents = events.filter(e => e.id !== eventId);\n    storageService.saveEvents(filteredEvents);\n    return filteredEvents;\n  },\n\n  // 每日内容管理 - 修复这里的bug！\n  getDailyContent: (date) => {\n    try {\n      return localStorage.getItem(`${STORAGE_KEYS.DAILY_CONTENT}${date}`) || '';\n    } catch (error) {\n      console.error('获取每日内容失败:', error);\n      return '';\n    }\n  },\n\n  saveDailyContent: (date, content) => {\n    try {\n      // 修复：使用 DAILY_CONTENT 而不是 DAILY_BACKGROUND\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_CONTENT}${date}`, content);\n      console.log(`内容已保存到: daily-content-${date}`, content.substring(0, 100));\n      return true;\n    } catch (error) {\n      console.error('保存每日内容失败:', error);\n      return false;\n    }\n  },\n\n  // 每日背景图片管理\n  getDailyBackground: (date) => {\n    try {\n      return localStorage.getItem(`${STORAGE_KEYS.DAILY_BACKGROUND}${date}`) || '';\n    } catch (error) {\n      console.error('获取背景图片失败:', error);\n      return '';\n    }\n  },\n\n  saveDailyBackground: (date, backgroundImage) => {\n    try {\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_BACKGROUND}${date}`, backgroundImage);\n      return true;\n    } catch (error) {\n      console.error('保存背景图片失败:', error);\n      return false;\n    }\n  },\n\n  // 获取特定日期的事件\n  getEventsByDate: (date) => {\n    const events = storageService.getEvents();\n    return events.filter(event => \n      moment(event.start).isSame(date, 'day')\n    );\n  },\n\n  // 获取本月事件\n  getEventsByMonth: (date) => {\n    const events = storageService.getEvents();\n    return events.filter(event => \n      moment(event.start).isSame(date, 'month')\n    );\n  },\n\n  // 新增：清理所有数据（用于测试）\n  clearAllData: () => {\n    try {\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('daily-content-') || key.startsWith('daily-background-') || key === 'calendar-events') {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('所有数据已清理');\n      return true;\n    } catch (error) {\n      console.error('清理数据失败:', error);\n      return false;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}