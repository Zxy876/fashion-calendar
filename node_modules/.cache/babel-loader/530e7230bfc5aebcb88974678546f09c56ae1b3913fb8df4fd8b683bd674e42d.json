{"ast":null,"code":"// src/utils/storage.js (更新)\nimport moment from 'moment';\nconst STORAGE_KEYS = {\n  EVENTS: 'calendar-events',\n  DAILY_CONTENT: 'daily-content-',\n  DAILY_BACKGROUND: 'daily-background-',\n  DAILY_IMAGES: 'daily-images-' // 新增：存储每日保存的图片\n};\nexport const storageService = {\n  // ... 保持原有的事件和内容管理方法不变 ...\n  getEvents: () => {\n    try {\n      const events = localStorage.getItem(STORAGE_KEYS.EVENTS);\n      return events ? JSON.parse(events) : [];\n    } catch (error) {\n      console.error('获取事件数据失败:', error);\n      return [];\n    }\n  },\n  saveEvents: events => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.EVENTS, JSON.stringify(events));\n      return true;\n    } catch (error) {\n      console.error('保存事件数据失败:', error);\n      return false;\n    }\n  },\n  // 新增：每日图片管理\n  getDailyImages: date => {\n    try {\n      const images = localStorage.getItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`);\n      return images ? JSON.parse(images) : [];\n    } catch (error) {\n      console.error('获取每日图片失败:', error);\n      return [];\n    }\n  },\n  saveDailyImage: (date, imageData) => {\n    try {\n      const images = storageService.getDailyImages(date);\n      const newImage = {\n        ...imageData,\n        id: Date.now() + Math.random().toString(36).substr(2, 9),\n        savedAt: new Date().toISOString()\n      };\n      images.push(newImage);\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`, JSON.stringify(images));\n      console.log(`图片已保存到: daily-images-${date}`, newImage);\n      return newImage;\n    } catch (error) {\n      console.error('保存每日图片失败:', error);\n      return null;\n    }\n  },\n  deleteDailyImage: (date, imageId) => {\n    try {\n      const images = storageService.getDailyImages(date);\n      const filteredImages = images.filter(img => img.id !== imageId);\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`, JSON.stringify(filteredImages));\n      return filteredImages;\n    } catch (error) {\n      console.error('删除每日图片失败:', error);\n      return [];\n    }\n  },\n  // 新增：检查日期是否有图片（用于日历标记）\n  hasDailyImages: date => {\n    const images = storageService.getDailyImages(date);\n    return images.length > 0;\n  },\n  // 新增：获取所有有图片的日期\n  getAllImageDates: () => {\n    const dates = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(STORAGE_KEYS.DAILY_IMAGES)) {\n        const date = key.replace(STORAGE_KEYS.DAILY_IMAGES, '');\n        dates.push(date);\n      }\n    }\n    return dates;\n  },\n  // 更新：清理所有数据\n  clearAllData: () => {\n    try {\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('daily-content-') || key.startsWith('daily-background-') || key.startsWith('daily-images-') || key === 'calendar-events') {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('所有数据已清理');\n      return true;\n    } catch (error) {\n      console.error('清理数据失败:', error);\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["moment","STORAGE_KEYS","EVENTS","DAILY_CONTENT","DAILY_BACKGROUND","DAILY_IMAGES","storageService","getEvents","events","localStorage","getItem","JSON","parse","error","console","saveEvents","setItem","stringify","getDailyImages","date","images","saveDailyImage","imageData","newImage","id","Date","now","Math","random","toString","substr","savedAt","toISOString","push","log","deleteDailyImage","imageId","filteredImages","filter","img","hasDailyImages","length","getAllImageDates","dates","i","key","startsWith","replace","clearAllData","Object","keys","forEach","removeItem"],"sources":["/Users/zxydediannao/new_fashion-calendar/fashion-calendar/src/utils/storage.js"],"sourcesContent":["// src/utils/storage.js (更新)\nimport moment from 'moment';\n\nconst STORAGE_KEYS = {\n  EVENTS: 'calendar-events',\n  DAILY_CONTENT: 'daily-content-',\n  DAILY_BACKGROUND: 'daily-background-',\n  DAILY_IMAGES: 'daily-images-' // 新增：存储每日保存的图片\n};\n\nexport const storageService = {\n  // ... 保持原有的事件和内容管理方法不变 ...\n getEvents: () => {\n    try {\n      const events = localStorage.getItem(STORAGE_KEYS.EVENTS);\n      return events ? JSON.parse(events) : [];\n    } catch (error) {\n      console.error('获取事件数据失败:', error);\n      return [];\n    }\n  },\n   saveEvents: (events) => {\n    try {\n      localStorage.setItem(STORAGE_KEYS.EVENTS, JSON.stringify(events));\n      return true;\n    } catch (error) {\n      console.error('保存事件数据失败:', error);\n      return false;\n    }\n  },\n  // 新增：每日图片管理\n  getDailyImages: (date) => {\n    try {\n      const images = localStorage.getItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`);\n      return images ? JSON.parse(images) : [];\n    } catch (error) {\n      console.error('获取每日图片失败:', error);\n      return [];\n    }\n  },\n\n  saveDailyImage: (date, imageData) => {\n    try {\n      const images = storageService.getDailyImages(date);\n      const newImage = {\n        ...imageData,\n        id: Date.now() + Math.random().toString(36).substr(2, 9),\n        savedAt: new Date().toISOString()\n      };\n      images.push(newImage);\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`, JSON.stringify(images));\n      console.log(`图片已保存到: daily-images-${date}`, newImage);\n      return newImage;\n    } catch (error) {\n      console.error('保存每日图片失败:', error);\n      return null;\n    }\n  },\n\n  deleteDailyImage: (date, imageId) => {\n    try {\n      const images = storageService.getDailyImages(date);\n      const filteredImages = images.filter(img => img.id !== imageId);\n      localStorage.setItem(`${STORAGE_KEYS.DAILY_IMAGES}${date}`, JSON.stringify(filteredImages));\n      return filteredImages;\n    } catch (error) {\n      console.error('删除每日图片失败:', error);\n      return [];\n    }\n  },\n\n  // 新增：检查日期是否有图片（用于日历标记）\n  hasDailyImages: (date) => {\n    const images = storageService.getDailyImages(date);\n    return images.length > 0;\n  },\n\n  // 新增：获取所有有图片的日期\n  getAllImageDates: () => {\n    const dates = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(STORAGE_KEYS.DAILY_IMAGES)) {\n        const date = key.replace(STORAGE_KEYS.DAILY_IMAGES, '');\n        dates.push(date);\n      }\n    }\n    return dates;\n  },\n\n  // 更新：清理所有数据\n  clearAllData: () => {\n    try {\n      Object.keys(localStorage).forEach(key => {\n        if (key.startsWith('daily-content-') || \n            key.startsWith('daily-background-') || \n            key.startsWith('daily-images-') || \n            key === 'calendar-events') {\n          localStorage.removeItem(key);\n        }\n      });\n      console.log('所有数据已清理');\n      return true;\n    } catch (error) {\n      console.error('清理数据失败:', error);\n      return false;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}